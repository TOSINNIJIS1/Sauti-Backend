const express = require('express');
const Cors = require('Cors');
const mongoose = require('mongoose');
const User = require('./middleware/db');
const bcrypt = require('bcryptjs');
const jwt =  require('jsonwebtoken');


const { MONGODB } = require('./config/config')
// App Config

const server = express()
const port = process.env.PORT || 9000

// Middlewares
server.use(express.json())
server.use(Cors())

// DB Config
mongoose.connect(MONGODB, {
    useNewUrlParser: true,
    useCreateIndex: true,
    useUnifiedTopology: true, 
})

.then(() => console.log('Database Connected'))
.catch((err) => console.log(err))

// API Endpoints

server.get('/', (req, res) => res.status(200).send('hello Sauti'))

server.post('/register', (req, res) => {
    let {fname, phone, email, password, location } = req.body

    fname = fname.trim()
    phone = phone.trim()
    email = email.trim()
    password = password.trim()
    location = fname.trim()

    if (fname === "" || phone === "" || email === "" || password === "" || location === "") {
        res.json({
            status: "Failed",
            message: "Empty input field"
        });
    } else if (!/^[a-z A-Z]*$/.test(fname)) {
        res.json({
            status: "Failed",
            message: "Invalid full name entered"
        })
    } else if (!/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email)) {
        res.json({
            status: "Failed",
            message: "Invalid email entered"
        })
    } else if (password.length < 8) {
        res.json({
            status: "Failed",
            message: "Password is too short"
        })
    } else {
        // Check if user exist
        User.findOne({email})
        .then(result => {
            if (result.length) {
                res.json({
                    status: "Failed",
                    message: "User  with the provided email already exist"
                })
            } else {
                const hashPassword = 10;
                bcrypt.hash(password, hashPassword).then(hashed => {
                    const newUser = new User ({
                        fname,
                        phone,
                        email,
                        password: hashed,
                        location
                    })

                    // const token = getSignedToken(newUser)

                    newUser.save()
                    .then(result => {
                        res.json({
                            status: "Success",
                            message: "Signup  Successful",
                            data: result,
                            // token: token
                        })
                    })
                    .catch(err => {
                        res.json({
                            status: "Failed",
                            message: "An error occured while saving user account"
                        })
                    })

                })
                .catch(err => {
                    res.json({
                        status: "Failed",
                        message: "An error occured while handling password"
                    })
                })

            }
        })
        .catch(err => {
            console.log(err);
            res.json({
                status: "Failed",
                message: "An error occur while checking for existing user!"
            })
        });
    }
})

server.post('/login', (req, res) => {
    let { email, password } = req.body

    email = email.trim()
    password = password.trim()

    if (email === "" || password === "") {
        res.json({
            status: "Failed",
            message: "Empty Credentials"
        })
    } else {
        // Check if user exist
        User.find({email})
        .then(data => {
            if (data) {
                //User exist
                const hashedPassword = data[0].password;
                bcrypt.compare(password, hashedPassword).then(result => {
                    if (result) {
                        console.log(data[0].fname, 'result')
                        
                        const token = getSignedToken(data)
                        
                        res.json({
                            "status": "Success",
                            "message": `Welcome ${data.fname}`,
                            "data": data,
                            "token": token
                        })
                    } else {
                        res.json({
                            status: "Failed",
                            message: "Invalid password entered"
                        })
                    }
                })
                .catch(err => {
                    res.json({    
                        status: "Failed",
                        message: "An error occur"
                    })
                })
            } else {
                res.json({
                    status: "Failed",
                    message: "Invalid credentials!"
                })
            }
        })
        .catch(err => {
            res.json({
                status: "Failed",
                message: "An error occured while checking for existing user"
            })
        })
    }

})

//  TOKEN 

server.get('/token', (req, res) => {
    const token = jwt.sign({
        token: 'hello there',
        
    }, "Secret", {expiresIn: '1h' })
    res.status(400).json(token)
})

getSignedToken = user => {

    const payload = {
        email: user.email,
        password: user.password
    };

    const secret = 'vincent admire lady mahiya'
    const options = {expiresIn: '1h'};
    const token  = jwt.sign(payload, secret, options)


    return token;
}

// Listener

server.listen(port, () => console.log('localhost: ${port}') )